<application>
  <component name="AppStorage">
    <histories>
      <item value="积分" />
      <item value="Assert" />
      <item value="Basanite" />
      <item value="取钱" />
      <item value="扣费" />
      <item value="付钱" />
      <item value="withd" />
      <item value="withdrawal" />
      <item value="Http Request Method Not Supported Exception" />
      <item value="Missing Servlet Request Parameter Exception" />
      <item value="check env variable, i.e. PATH=..." />
      <item value="check system properties" />
      <item value="normally system environment variables are in UPPERCASE, however there might be exceptions. * so the caller should provide the key in the right case" />
      <item value="so the caller should provide the key in the right case" />
      <item value="System Under Maintenance" />
      <item value="System Under Maintenanc" />
      <item value="System Maintenance" />
      <item value="Retrieve Trade History" />
      <item value="Retrieve" />
      <item value="system is under maintenance." />
      <item value="unstable" />
      <item value="Unexpected end-of-input: expected close marker for Object" />
      <item value="Reports any local variables whose type is declared to be a concrete class. Such declarations may represent a failure of abstraction, and may make testing more difficult. Declarations whose classes come from system or third-party libraries will not be reported by this inspection. catch block parameters of concrete exception type will also not be reported by this inspection. Use the checkbox below to have this inspection ignore local variables whose type is an abstract class." />
      <item value="Reports casting a value to a concrete class, rather than an interface. Such declarations may represent a failure of abstraction, and may make testing more difficult. Casts to system or library classes and casts inside equals() and clone() methods will not be reported by this inspection. Use the checkbox below to have this inspection ignore casts to abstract classes." />
      <item value="Reports any variables which may be declared with a weaker type. For instance, a variable may be of type ArrayList, and only the method isEmpty() is called on it. In this case the type List would do just as well. Enable the Use righthand type checkbox below to prevent weakening the left side of assignments when the right side is not a type cast or new expression. When storing the result of a method call in a variable, it is useful to retain the type of the method call result instead of unnecessarily weakening it. Enable the Use parameterized type checkbox below to use the parameterized type of the collection as weakest type when the object evaluated is used as an argument to a collection method with a parameter type of java.lang.Object. Use this option to prevent weakening to Object when passing an object to the collection methods get(), remove(), contains(), indexOf(), lastIndexOf(), containsKey() and containsValue(). Enable the Do not weaken to Object checkbox below to specify whether a type should be weakened to java.lang.Object. Weakening to java.lang.Object is often not very useful. Enable the Only weaken to an interface checkbox below to only report when the type can be weakened to an interface type. Enable the Do not weaken return type checkbox below to prevent reporting when return type may be weakened. Only variables will be analyzed. Stop classes are intended to prevent weakening to classes lower than stop classes, even if it would be possible. In some cases this may improve readability." />
      <item value="Reports public methods in classes which are not exposed as in interface. Exposing all public methods via interface is important for maintaining loose coupling, and may be necessary for certain component-based programming styles. Use the list below to specify special annotations. Methods annotated with one of these annotations will be ignored by this inspection. Use the checkbox below to ignore methods of which the containing class does not implement a non-library interface." />
      <item value="Reports &quot;magic numbers&quot;, which are numeric literals used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L, 0.0, 1.0, 0.0F and 1.0F are not reported by this inspection. Use the first checkbox below to disable this inspection within hashCode() methods. Use the second checkbox below to ignore magic numbers in annotations. Use the third checkbox below to ignore magic numbers used as initial capacity when constructing Collection, Map, StringBuilder or StringBuffer objects." />
      <item value="optimize" />
      <item value="优化" />
      <item value="Sorts this list according to the order induced by the specified * {@link Comparator}. * * &lt;p&gt;All elements in this list must be &lt;i&gt;mutually comparable&lt;/i&gt; using the * specified comparator (that is, {@code c.compare(e1, e2)} must not throw * a {@code ClassCastException} for any elements {@code e1} and {@code e2} * in the list). * * &lt;p&gt;If the specified comparator is {@code null} then all elements in this * list must implement the {@link Comparable} interface and the elements' * {@linkplain Comparable natural ordering} should be used. * * &lt;p&gt;This list must be modifiable, but need not be resizable. * * @implSpec * The default implementation obtains an array containing all elements in * this list, sorts the array, and iterates over this list resetting each * element from the corresponding position in the array. (This avoids the * n&lt;sup&gt;2&lt;/sup&gt; log(n) performance that would result from attempting * to sort a linked list in place.) * * @implNote * This implementation is a stable, adaptive, iterative mergesort that * requires far fewer than n lg(n) comparisons when the input array is * partially sorted, while offering the performance of a traditional * mergesort when the input array is randomly ordered. If the input array * is nearly sorted, the implementation requires approximately n * comparisons. Temporary storage requirements vary from a small constant * for nearly sorted input arrays to n/2 object references for randomly * ordered input arrays. * * &lt;p&gt;The implementation takes equal advantage of ascending and * descending order in its input array, and can take advantage of * ascending and descending order in different parts of the same * input array. It is well-suited to merging two or more sorted arrays: * simply concatenate the arrays and sort the resulting array. * * &lt;p&gt;The implementation was adapted from Tim Peters's list sort for Python * (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt; * TimSort&lt;/a&gt;). It uses techniques from Peter McIlroy's &quot;Optimistic * Sorting and Information Theoretic Complexity&quot;, in Proceedings of the * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, * January 1993." />
      <item value="&amp;gt;" />
      <item value="&amp;lt;" />
      <item value="已上架" />
      <item value="上架" />
      <item value="Advertise" />
      <item value="结算" />
      <item value="settlement" />
      <item value="journal" />
      <item value="银行流水" />
      <item value="流水" />
      <item value="换行" />
      <item value="CR" />
      <item value=" Account Suspended" />
      <item value="Index assigned by caller to identify a specific account" />
      <item value="Original ID Password authentication" />
      <item value="yet" />
      <item value=" immediately" />
      <item value="Indicates login password changing options" />
      <item value=" other integration" />
      <item value="Alert of login password changing options" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="468" />
        <entry key="ENGLISH" value="469" />
        <entry key="AZERBAIJANI" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="TURKISH" value="1" />
        <entry key="WELSH" value="1" />
        <entry key="INDONESIAN" value="3" />
        <entry key="JAVANESE" value="4" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="863505099@qq.com" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="primaryFontFamily" value="Ayuthaya" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="pwvison@163.com" />
      </youdao-translate>
    </option>
  </component>
</application>